# Aliases
alias cap="bundle exec cap"
alias prt="carton exec prt"

if whence gls > /dev/null; then
  alias ls="gls -F --color"
else
  alias ls="ls -F --color"
fi

whence vim > /dev/null 2>&1 && alias vi="vim"

# Hokan
autoload -Uz compinit && compinit
setopt auto_pushd
setopt pushd_ignore_dups
setopt correct

zstyle ':completion:*:default' menu select=2
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' # ignore case
zstyle ':completion:*:cd:*' ignore-parents parent pwd
zstyle ':completion:*' list-separator '-'

# Color
export LS_COLORS='di=01;34:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# Prompt
autoload -Uz colors && colors
PROMPT="%{${fg[yellow]}%}%(!.#.$) %{$reset_color%}"
PROMPT2="%{${fg[yellow]}%}%_> %{$reset_color%}"
SPROMPT="%r is correct? [n,y,a,e]: "

precmd () {
  RPROMPT="%{${fg[yellow]}%}[$(pwd)]%{${reset_color}%}"
}

# History
HISTFILE=$HOME/.zsh_history
HISTSIZE=100000
SAVEHIST=$HISTSIZE
setopt share_history
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt hist_reduce_blanks
setopt hist_no_store

# load *env
whence plenv  > /dev/null 2>&1 && eval "$(plenv init - zsh)"
whence rbenv  > /dev/null 2>&1 && eval "$(rbenv init - zsh)"
whence nodenv > /dev/null 2>&1 && eval "$(nodenv init - zsh)"
whence direnv > /dev/null 2>&1 && eval "$(direnv hook zsh)"

# Default Permission
umask 022

# Beep
setopt nolistbeep

# Load environment dependent configurations
[ -f "${HOME}/.zsh/zshrc.$(uname)" ] && source "${HOME}/.zsh/zshrc.$(uname)"

# Functions
function peco-select-history {
  local tac
  if whence tac > /dev/null; then
    tac="tac"
  else
    tac="tail -r"
  fi
  BUFFER=$(history -n 1 | $tac | peco --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle clear-screen
}
zle -N peco-select-history

function peco-find {
  local current_buffer=$BUFFER
  local file_type=''
  local file_path=''
  local git_search_command=''

  if echo "$current_buffer" | grep -E '^(cd|ls)'; then
    file_type='d'
    git_search_command='git ls-files $(git rev-parse --show-toplevel) --full-name | while read line; do echo ${line%/*}; done | sort | uniq'
  else
    file_type='f'
    git_search_command='{ git ls-files $(git rev-parse --show-toplevel) --full-name; git ls-files $(git rev-parse --show-toplevel) --exclude-standard --other --full-name } | sort'
  fi

  if git rev-parse 2> /dev/null; then
    file_path=$(eval "${git_search_command}" | peco)
    if [ ${#file_path} -ne 0 ]; then
      file_path=`git rev-parse --show-toplevel`/${file_path}
    fi
  else
    file_path=$(find -L . -type ${file_type} -maxdepth 10 | peco)
  fi

  if [ ${#file_path} -ne 0 ]; then
    BUFFER="${current_buffer} ${file_path}"
    CURSOR=${#BUFFER}
  fi
}
zle -N peco-find

function peco-ghq {
  local dir=$(ghq list -p | peco --query "$LBUFFER")
  if [ ${#dir} -ne 0 ]; then
    BUFFER="cd ${dir}"
    zle accept-line
  fi
  zle clear-screen
}
zle -N peco-ghq

function cd-to-top {
  BUFFER="cd $(git rev-parse --show-toplevel)"
  zle accept-line
  zle clear-screen
}
zle -N cd-to-top

whence peco-select-history > /dev/null 2>&1 && bindkey '^r' peco-select-history
whence peco-find           > /dev/null 2>&1 && bindkey '^f' peco-find
whence peco-ghq            > /dev/null 2>&1 && bindkey '^g' peco-ghq
whence cd-to-top           > /dev/null 2>&1 && bindkey '^t' cd-to-top
